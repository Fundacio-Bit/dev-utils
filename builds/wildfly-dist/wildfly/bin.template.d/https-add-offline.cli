# <security-realm name="ApplicationRealm">
#    <server-identities>
#        <ssl>
#            <keystore path="application.keystore" relative-to="jboss.server.config.dir" keystore-password="password" alias="server" key-password="password" generate-self-signed-certificate-host="localhost"/>
#       </ssl>
#    </server-identities>
#    <authentication>
#        <local default-user="$local" allowed-users="*" skip-group-loading="true"/>
#            <properties path="application-users.properties" relative-to="jboss.server.config.dir"/>
#    </authentication>
#    <authorization>
#        <properties path="application-roles.properties" relative-to="jboss.server.config.dir"/>
#    </authorization>
# </security-realm>

# embed-server --server-config=${server.config:standalone.xml}

# /core-service=management/security-realm=ApplicationRealm/server-identity=ssl:write-attribute(name=keystore-path, value="${NGINX_SSL_NAMESERVER}.jks")
# /core-service=management/security-realm=ApplicationRealm/server-identity=ssl:write-attribute(name=keystore-relative-to, value="jboss.server.config.dir")
# /core-service=management/security-realm=ApplicationRealm/server-identity=ssl:write-attribute(name=keystore-password, value="${NGINX_KEYSTORE_PASS}")
# /core-service=management/security-realm=ApplicationRealm/server-identity=ssl:write-attribute(name=alias, value="${NGINX_SSL_DST_ALIAS}")
# /core-service=management/security-realm=ApplicationRealm/server-identity=ssl:write-attribute(name=key-password, value="${NGINX_KEYSTORE_PASS}")
# /core-service=management/security-realm=ApplicationRealm/server-identity=ssl:undefine-attribute(name=generate-self-signed-certificate-host)

# stop-embedded-server



embed-server --server-config=standalone.xml

if (outcome != success) of /subsystem=elytron/key-store=${NGINX_SSL_DST_ALIAS}KeyStore:read-resource 
/subsystem=elytron/key-store=${NGINX_SSL_DST_ALIAS}KeyStore:add(path=ssl/${NGINX_SSL_NAMESERVER}.p12, relative-to=jboss.server.config.dir, credential-reference={clear-text="${NGINX_KEYSTORE_PASS}"}, type=PKCS12) 
end-if

if (outcome != success) of /subsystem=elytron/key-manager=${NGINX_SSL_DST_ALIAS}KeyManager:read-resource 
/subsystem=elytron/key-manager=${NGINX_SSL_DST_ALIAS}KeyManager:add(key-store=${NGINX_SSL_DST_ALIAS}KeyStore, credential-reference={clear-text="${NGINX_KEYSTORE_PASS}"}, alias-filter="${NGINX_SSL_DST_ALIAS}") 
end-if

if (outcome != success) of /subsystem=elytron/key-store=${NGINX_SSL_DST_ALIAS}TrustStore:read-resource 
/subsystem=elytron/key-store=${NGINX_SSL_DST_ALIAS}TrustStore:add(path=ssl/${NGINX_SSL_NAMESERVER}trust.jks, relative-to=jboss.server.config.dir, credential-reference={clear-text="${NGINX_KEYSTORE_PASS}"}, type=JKS) 
end-if

if (outcome != success) of /subsystem=elytron/trust-manager=${NGINX_SSL_DST_ALIAS}TrustManager:read-resource 
/subsystem=elytron/trust-manager=${NGINX_SSL_DST_ALIAS}TrustManager:add(key-store=${NGINX_SSL_DST_ALIAS}TrustStore) 
end-if

if (outcome != success) of /subsystem=elytron/server-ssl-context=${NGINX_SSL_DST_ALIAS}SSLContext:read-resource 
/subsystem=elytron/server-ssl-context=${NGINX_SSL_DST_ALIAS}SSLContext:add(key-manager=${NGINX_SSL_DST_ALIAS}KeyManager, trust-manager=${NGINX_SSL_DST_ALIAS}TrustManager, protocols=["TLSv1.3", "TLSv1.2"]) 
else 
/subsystem=elytron/server-ssl-context=${NGINX_SSL_DST_ALIAS}SSLContext:write-attribute(name=key-manager, value=${NGINX_SSL_DST_ALIAS}KeyManager) 
/subsystem=elytron/server-ssl-context=${NGINX_SSL_DST_ALIAS}SSLContext:write-attribute(name=trust-manager, value=${NGINX_SSL_DST_ALIAS}TrustManager) 
/subsystem=elytron/server-ssl-context=${NGINX_SSL_DST_ALIAS}SSLContext:write-attribute(name=protocols, value=["TLSv1.3", "TLSv1.2"]) 
end-if

if (outcome != success) of /subsystem=undertow/server=default-server/https-listener=https:read-resource 
/subsystem=undertow/server=default-server/https-listener=https:add(socket-binding=https, ssl-context=${NGINX_SSL_DST_ALIAS}SSLContext) 
else 
/subsystem=undertow/server=default-server/https-listener=https:write-attribute(name=ssl-context, value=${NGINX_SSL_DST_ALIAS}SSLContext)
end-if

stop-embedded-server

